{"version":3,"sources":["serviceWorker.js","math-utils.js","components/game/UseGameState.js","components/game/play/PlayAgain.js","components/game/play/PlayNumber.js","components/game/stars-display/StarsDisplay.js","components/game/Game.js","components/App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","utils","sum","arr","reduce","acc","curr","range","min","max","Array","from","length","_","i","random","Math","floor","randomSumIn","sets","sums","j","len","candidateSet","concat","candidateSum","push","useGameState","_useState","useState","_useState2","Object","slicedToArray","stars","setStars","_useState3","_useState4","availableNums","setAvailableNums","_useState5","_useState6","candidateNums","setCandidateNums","_useState7","_useState8","secondsLeft","setSecondsLeft","useEffect","timerId","setTimeout","clearTimeout","setGameState","newCandidateNums","newAvailableNums","filter","n","includes","PlayAgain","props","react_default","a","createElement","className","style","color","gameStatus","onClick","colors","available","used","wrong","candidate","PlayNumber","backgroundColor","status","number","StarsDisplay","count","map","starId","key","Game","_useGameState","candidatesAreWrong","numberStatus","onNumberClick","currentStatus","cn","play_PlayAgain","startNewGame","stars_display_StarsDisplay","play_PlayNumber","StarMatch","gameId","setGameId","game_Game","ReactDOM","render","App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"yJAYMA,SAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,UAO5BW,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,gBC/F3DC,EAAQ,CAEZC,IAAK,SAAAC,GAAG,OAAIA,EAAIC,OAAO,SAACC,EAAKC,GAAN,OAAeD,EAAMC,GAAM,IAGlDC,MAAO,SAACC,EAAKC,GAAN,OAAcC,MAAMC,KAAK,CAACC,OAAQH,EAAMD,EAAM,GAAI,SAACK,EAAGC,GAAJ,OAAUN,EAAMM,KAGzEC,OAAQ,SAACP,EAAKC,GAAN,OAAcD,EAAMQ,KAAKC,MAAMR,EAAMO,KAAKD,WAIlDG,YAAa,SAACf,EAAKM,GAGjB,IAFA,IAAMU,EAAO,CAAC,IACRC,EAAO,GACJN,EAAI,EAAGA,EAAIX,EAAIS,OAAQE,IAC9B,IAAK,IAAIO,EAAI,EAAGC,EAAMH,EAAKP,OAAQS,EAAIC,EAAKD,IAAK,CAC/C,IAAME,EAAeJ,EAAKE,GAAGG,OAAOrB,EAAIW,IAClCW,EAAexB,EAAMC,IAAIqB,GAC3BE,GAAgBhB,IAClBU,EAAKO,KAAKH,GACVH,EAAKM,KAAKD,IAIhB,OAAOL,EAAKnB,EAAMc,OAAO,EAAGK,EAAKR,WAItBX,ICGA0B,EA7BM,WAAM,IAAAC,EACCC,mBAAS5B,EAAMc,OAAO,EAAG,IAD1Be,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAClBK,EADkBH,EAAA,GACXI,EADWJ,EAAA,GAAAK,EAEiBN,mBAAS5B,EAAMM,MAAM,EAAG,IAFzC6B,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAElBE,EAFkBD,EAAA,GAEHE,EAFGF,EAAA,GAAAG,EAGiBV,mBAAS,IAH1BW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGlBE,EAHkBD,EAAA,GAGHE,EAHGF,EAAA,GAAAG,EAIad,mBAAS,IAJtBe,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAIlBE,EAJkBD,EAAA,GAILE,EAJKF,EAAA,GAMzBG,oBAAU,WACR,GAAIF,EAAc,GAAKR,EAAczB,OAAS,EAAG,CAC/C,IAAMoC,EAAUC,WAAW,kBAAMH,EAAeD,EAAc,IAAI,KAClE,OAAO,kBAAMK,aAAaF,OAiB9B,MAAO,CAACf,QAAOI,gBAAeI,gBAAeI,cAAaM,aAbrC,SAACC,GACpB,GAAInD,EAAMC,IAAIkD,KAAsBnB,EAClCS,EAAiBU,OACZ,CACL,IAAMC,EAAmBhB,EAAciB,OACrC,SAAAC,GAAC,OAAKH,EAAiBI,SAASD,KAElCrB,EAASjC,EAAMiB,YAAYmC,EAAkB,IAC7Cf,EAAiBe,GACjBX,EAAiB,QCbRe,EAXG,SAAAC,GAAK,OACrBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OACEC,UAAU,UACVC,MAAO,CAACC,MAA4B,SAArBN,EAAMO,WAAwB,MAAQ,UAC/B,SAArBP,EAAMO,WAAwB,YAAc,QAE/CN,EAAAC,EAAAC,cAAA,UAAQK,QAASR,EAAMQ,SAAvB,gBCIEC,EAAS,CACbC,UAAW,YACXC,KAAM,aACNC,MAAO,aACPC,UAAW,eAGEC,EAlBI,SAAAd,GAAK,OACtBC,EAAAC,EAAAC,cAAA,UACEC,UAAU,SACVC,MAAO,CAACU,gBAAiBN,EAAOT,EAAMgB,SACtCR,QAAS,kBAAMR,EAAMQ,QAAQR,EAAMiB,OAAQjB,EAAMgB,UAEhDhB,EAAMiB,SCIIC,EARM,SAAAlB,GAAK,OACxBC,EAAAC,EAAAC,cAAA,WACG5D,EAAMM,MAAM,EAAGmD,EAAMmB,OAAOC,IAAI,SAAAC,GAAM,OACrCpB,EAAAC,EAAAC,cAAA,OAAKmB,IAAKD,EAAQjB,UAAU,aCoEnBmB,EApEF,SAAAvB,GAAS,IAAAwB,EAOhBvD,IALFM,EAFkBiD,EAElBjD,MACAI,EAHkB6C,EAGlB7C,cACAI,EAJkByC,EAIlBzC,cACAI,EALkBqC,EAKlBrC,YACAM,EANkB+B,EAMlB/B,aAGIgC,EAAqBlF,EAAMC,IAAIuC,GAAiBR,EAChDgC,EAAsC,IAAzB5B,EAAczB,OAC7B,MACgB,IAAhBiC,EAAoB,OAAS,SAE3BuC,EAAe,SAAAT,GACnB,OAAKtC,EAAcmB,SAASmB,GAIxBlC,EAAce,SAASmB,GAClBQ,EAAqB,QAAU,YAGjC,YAPE,QAULE,EAAgB,SAACV,EAAQW,GAC7B,GAAsB,SAAlBA,GAA4C,IAAhBzC,EAAhC,CAIA,IAAMO,EACc,cAAlBkC,EACI7C,EAAcjB,OAAOmD,GACrBlC,EAAca,OAAO,SAAAiC,GAAE,OAAIA,IAAOZ,IAExCxB,EAAaC,KAGf,OACEO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,0DAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACG,WAAfG,EACCN,EAAAC,EAAAC,cAAC2B,EAAD,CAAWtB,QAASR,EAAM+B,aAAcxB,WAAYA,IAEpDN,EAAAC,EAAAC,cAAC6B,EAAD,CAAcb,MAAO5C,KAGzB0B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACZ7D,EAAMM,MAAM,EAAG,GAAGuE,IAAI,SAAAH,GAAM,OAC3BhB,EAAAC,EAAAC,cAAC8B,EAAD,CACEX,IAAKL,EACLD,OAAQU,EAAaT,GACrBA,OAAQA,EACRT,QAASmB,QAKjB1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,mBAAwCjB,KC9D/B+C,EALG,WAAM,IAAAhE,EACMC,mBAAS,GADfC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACfiE,EADe/D,EAAA,GACPgE,EADOhE,EAAA,GAEtB,OAAO6B,EAAAC,EAAAC,cAACkC,EAAD,CAAMf,IAAKa,EAAQJ,aAAc,kBAAMK,EAAUD,EAAS,OCCnEG,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAAQC,SAASC,eAAe,SRgBzC,SAAkBrH,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqH,IAAIC,cAAwB7H,OAAOC,SAAS6H,MACpDC,SAAW/H,OAAOC,SAAS8H,OAIvC,OAGF/H,OAAOgI,iBAAiB,OAAQ,WAC9B,IAAM3H,EAAK,GAAA0C,OAAM8E,cAAN,sBAEP/H,GAgEV,SAAiCO,EAAOC,GAEtC2H,MAAM5H,GACHK,KAAK,SAAAwH,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASjC,QACO,MAAfkC,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C/H,UAAUC,cAAc+H,MAAM7H,KAAK,SAAAC,GACjCA,EAAa6H,aAAa9H,KAAK,WAC7BV,OAAOC,SAASwI,aAKpBrI,EAAgBC,EAAOC,KAG1BgB,MAAM,WACLJ,QAAQC,IACN,mEArFAuH,CAAwBrI,EAAOC,GAI/BC,UAAUC,cAAc+H,MAAM7H,KAAK,WACjCQ,QAAQC,IACN,gHAMJf,EAAgBC,EAAOC,MQvC/BE","file":"static/js/main.6087cf10.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Math science\nconst utils = {\n  // Sum an array\n  sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\n\n  // create an array of numbers between min and max (edges included)\n  range: (min, max) => Array.from({length: max - min + 1}, (_, i) => min + i),\n\n  // pick a random number between min and max (edges included)\n  random: (min, max) => min + Math.floor(max * Math.random()),\n\n  // Given an array of numbers and a max...\n  // Pick a random sum (< max) from the set of all available sums in arr\n  randomSumIn: (arr, max) => {\n    const sets = [[]];\n    const sums = [];\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0, len = sets.length; j < len; j++) {\n        const candidateSet = sets[j].concat(arr[i]);\n        const candidateSum = utils.sum(candidateSet);\n        if (candidateSum <= max) {\n          sets.push(candidateSet);\n          sums.push(candidateSum);\n        }\n      }\n    }\n    return sums[utils.random(0, sums.length)];\n  },\n};\n\nexport default utils;","import { useEffect, useState } from 'react';\n\nimport utils from '../../math-utils';\n\nconst useGameState = () => {\n  const [stars, setStars] = useState(utils.random(1, 9));\n  const [availableNums, setAvailableNums] = useState(utils.range(1, 9));\n  const [candidateNums, setCandidateNums] = useState([]);\n  const [secondsLeft, setSecondsLeft] = useState(10);\n\n  useEffect(() => {\n    if (secondsLeft > 0 && availableNums.length > 0) {\n      const timerId = setTimeout(() => setSecondsLeft(secondsLeft - 1), 1000);\n      return () => clearTimeout(timerId);\n    }\n  });\n\n  const setGameState = (newCandidateNums) => {\n    if (utils.sum(newCandidateNums) !== stars) {\n      setCandidateNums(newCandidateNums);\n    } else {\n      const newAvailableNums = availableNums.filter(\n        n => !newCandidateNums.includes(n),\n      );\n      setStars(utils.randomSumIn(newAvailableNums, 9));\n      setAvailableNums(newAvailableNums);\n      setCandidateNums([]);\n    }\n  };\n\n  return {stars, availableNums, candidateNums, secondsLeft, setGameState};\n};\n\nexport default useGameState;","import React from 'react';\n\nconst PlayAgain = props => (\n  <div className=\"game-done\">\n    <div\n      className=\"message\"\n      style={{color: props.gameStatus === 'lost' ? 'red' : 'green'}}>\n      {props.gameStatus === 'lost' ? 'Game Over' : 'Nice'}\n    </div>\n    <button onClick={props.onClick}>Play Again</button>\n  </div>\n);\n\nexport default PlayAgain;","import React from 'react';\n\nconst PlayNumber = props => (\n  <button\n    className=\"number\"\n    style={{backgroundColor: colors[props.status]}}\n    onClick={() => props.onClick(props.number, props.status)}\n  >\n    {props.number}\n  </button>\n);\n\n// Color Theme\nconst colors = {\n  available: 'lightgray',\n  used: 'lightgreen',\n  wrong: 'lightcoral',\n  candidate: 'deepskyblue',\n};\n\nexport default PlayNumber;","import React from 'react';\n\nimport utils from '../../../math-utils';\n\nconst StarsDisplay = props => (\n  <div>\n    {utils.range(1, props.count).map(starId => (\n      <div key={starId} className=\"star\"/>\n    ))}\n  </div>\n);\n\nexport default StarsDisplay;","import React from 'react';\n\nimport utils from '../../math-utils';\nimport useGameState from './UseGameState';\nimport { PlayAgain, PlayNumber } from './play';\nimport { StarsDisplay } from './stars-display';\n\nconst Game = props => {\n  const {\n    stars,\n    availableNums,\n    candidateNums,\n    secondsLeft,\n    setGameState,\n  } = useGameState();\n\n  const candidatesAreWrong = utils.sum(candidateNums) > stars;\n  const gameStatus = availableNums.length === 0\n    ? 'won'\n    : secondsLeft === 0 ? 'lost' : 'active';\n\n  const numberStatus = number => {\n    if (!availableNums.includes(number)) {\n      return 'used';\n    }\n\n    if (candidateNums.includes(number)) {\n      return candidatesAreWrong ? 'wrong' : 'candidate';\n    }\n\n    return 'available';\n  };\n\n  const onNumberClick = (number, currentStatus) => {\n    if (currentStatus === 'used' || secondsLeft === 0) {\n      return;\n    }\n\n    const newCandidateNums =\n      currentStatus === 'available'\n        ? candidateNums.concat(number)\n        : candidateNums.filter(cn => cn !== number);\n\n    setGameState(newCandidateNums);\n  };\n\n  return (\n    <div className=\"game\">\n      <div className=\"help\">\n        Pick 1 or more numbers that sum to the number of stars\n      </div>\n      <div className=\"body\">\n        <div className=\"left\">\n          {gameStatus !== 'active' ? (\n            <PlayAgain onClick={props.startNewGame} gameStatus={gameStatus}/>\n          ) : (\n            <StarsDisplay count={stars}/>\n          )}\n        </div>\n        <div className=\"right\">\n          {utils.range(1, 9).map(number => (\n            <PlayNumber\n              key={number}\n              status={numberStatus(number)}\n              number={number}\n              onClick={onNumberClick}\n            />\n          ))}\n        </div>\n      </div>\n      <div className=\"timer\">Time Remaining: {secondsLeft}</div>\n    </div>\n  );\n};\n\nexport default Game;","import React, { useState } from 'react';\nimport { Game } from './game';\n\nconst StarMatch = () => {\n  const [gameId, setGameId] = useState(1);\n  return <Game key={gameId} startNewGame={() => setGameId(gameId + 1)}/>;\n};\n\nexport default StarMatch;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport  App  from './components/App';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}